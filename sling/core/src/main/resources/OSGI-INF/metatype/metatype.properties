#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.
#


#
# This file contains localization strings for configuration labels and
# descriptions as used in the metatype.xml descriptor generated by the
# the Sling SCR plugin

#
# Default Error Handler Component
errhandler.default.name = Default Error Handler Component
errhandler.default.description = This component is used to render error and \
 exception messages if no other registered error handler component claimed \
 responsibility. This handler has no configurable properties.

#
# Request level authentication filter. Uses AuthenticationHandlers for the
# actual work of extracting user details from the request.
auth.name = Authentication Filter
auth.description = Request Level filter which is used at the beginning of \
 request processing to extract user authentication details from the request with \
 the help of authentication handlers registered as separate components. One \
 example of such an authentication handler is the handler HTTP Authorization \
 header contained authentication.
auth.sudo.cookie.name = Impersonation Cookie
auth.sudo.cookie.description = The name the HTTP Cookie to set with the value \
 of the user which is to be impersonated. This cookie will always be a session \
 cookie.
auth.sudo.parameter.name = Impersonation Parameter
auth.sudo.parameter.description = The name of the request parameter initiating \
 impersonation. Setting this parameter to a user id will result in using an \
 impersonated session (instead of the actually authenticated session) and set \
 a session cookie of the name defined in the Impersonation Cookie setting.
auth.annonymous.name = Allow Anonymous Access
auth.annonymous.description = Whether default access as anonymous when no \
 credentials are present in the request is allowed. The default value is "false" \
 to force authentication. When set to "true" authentication is only requested \
 if the repository denies access.
 
#
# The main sling part controlling the request processing (ComponentRequestHandler)
sling.name = Sling Request Processor
sling.description = The central request processor of request to sling. This \
 component has no configurable properties.
 
#
# Component Level Component Resolver
resolver.name = Component Resolver Filter
resolver.description = This component level filter is called for each Content \
 object to resolve the Component which is responsible to handle the action \
 and/or render the response. This filter has no configurable properties.

resolver.path.name = Path
resolver.path.description = Path prefix to apply to component IDs in case of \
 relative path names used as Component ID.


#
# Error Handler Filter
errhandler.name = Error Handler Filter
errhandler.description = This request level filter wraps the complete request \
 handled by the Sling Request Processor catching any exceptions to render a \
 useful message to the client. This filter also handles the sendError  and \
 sendRedirect methods on behalf of the Component Framework. This filter has \
 no configurable properties.

#
# Component Action Filter
action.name = Component Action Filter
action.description = Component level filter, which calls the performAction \
 method on the component addressed by the client request. This filter has no \
 configurable properties.

#
# Repository based Component Registry 
registry.name = Repository Component Registry
registry.description = This component registers Components defined in the JCR \
 repository with the OSGi service registry and makes the available for use \
 to handle component requests. The component also registers as an OSGi \
 EventListener to receive events from the Content Manager. This component has \
 no configurable properties.

#
# Localizations for ContentResolverFilter configuration
resolver.name = Content Resolver
resolver.description =  Configures the Content Resolver for request URL and \
 content path rewriting.
resolver.allowDirect.name = Allow Direct Mapping
resolver.allowDirect.description = Whether to add a direct URL mapping to the front \
 of the mapping list.
resolver.fake.name = Internal Redirections
resolver.fake.description = List of direct URL mappings used for simple internal \
 redirections. Format is <externalURL>-<internalURL>. Mappings are applied on \
 the complete request URL only.
resolver.mapping.name = URL Mappings
resolver.mapping.description = List of mappings to apply to URLs. Incoming mappings \
 are applied to request URLs to map to Content paths, outgoing mappings are \
 applied to map Content paths to URLs used on subsequent requests. Form ist \
 <externalURLPrefix><op><internalURLPrefix> where <op> is ">" for incoming \
 mappings, "<" for outgoing mappings and "-" for mappings applied in both \
 directions. Mappings are applied in configuration order by comparing and \
 replacing URL prefixes.

#
# Properties for completeness. Yet these properties should never be used and configurable
service.description.name = Service Description
service.description.description = Description of the Service (do not change !)
service.vendor.name = Service Vendor
service.vendor.name.description = Name of the Service Vendor (do not change !)

#
# Common properties for Request Filters
filter.scope.name = Filter Scope
filter.scope.description = Scope of the Render Filter: "component" for per-Component Filters, "request" for per-request filters.
filter.order.name = Filter Order
filter.order.description = Integer value, the lower the value to earlier the filter is called.

request.log.name = Request Logger
request.log.description = Configures the main loggers of the request logger, \
 namely the request log and the access log. Further loggers may be configured \
 by creating configurations for the Request Logger Service.
request.log.output.name = Request Log Name
request.log.output.description = Name of the destination for the request log. \
 The request log logs the entry and exit of each request into and \
 out of the system together with the entry time, exit time, time to process \
 the request, a request counter as well as the final status code and response \
 content type. In terms of Request Logger Service formats, request entry is \
 logged with the format "%t [%R] -> %m %U%q %H" and request exit is logged \
 with the format "%{end}t [%R] <- %s %{Content-Type}o %Dms".
request.log.outputtype.name = Request Log Type
request.log.outputtype.description = Type of request log destination. Select \
 "Logger Name" to write the request log to an SLF4J logger, "File Name" to \
 write the request log to a file (relative paths resolved against sling.home).
request.log.enabled.name = Enable Request Log
request.log.enabled.description = Whether to enable Request logging or not.
access.log.output.name = Access Log Name
access.log.output.description = Name of the destination for the request log. \
 The access log writes an entry for each request as the request terminates \
 using the NCSA extended/combined log format. In terms of Request Logger \
 Service formats the access log is written with the format \
 "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"".
access.log.outputtype.name = Access Log Type
access.log.outputtype.description = Type of access log destination. Select \
 "Logger Name" to write the access log to an SLF4J logger, "File Name" to \
 write the access log to a file (relative paths resolved against sling.home).
access.log.enabled.name = Enable Access Log
access.log.enabled.description = Whether to enable Access logging or not.


request.log.service.name = Customizable Request Data Logger
request.log.service.description = This configuration creates customizable \
 loggers for request content. Each configuration results in a logger writing \
 the requested data. Deleting an existing configuration removes the respective \
 logger.
request.log.service.onentry.name = Request Entry
request.log.service.onentry.description = Check if the logger is called on \
 request entry. Otherwise leave unchecked and the logger will be called on \
 request exit (aka termination), which is the default for access logger type \
 loggers.
request.log.service.format.name = Log Format
request.log.service.format.description = The format for log entries. This is \
 a format string as is used by the Apache httpd CustomLog directive.
request.log.service.output.name = Logger Name
request.log.service.output.description = Name of the destination for the log \
 output. Depending on the output type this is a file name (absolute or \
 relative), a SLF4J logger name or the name under which a RequestLog service \
 has been registered.
request.log.service.outputtype.name = Logger Type
request.log.service.outputtype.description = Type of log destination. Select \
 "Logger Name" to write the access log to an SLF4J logger, "File Name" to \
 write the access log to a file (relative paths resolved against sling.home) \
 or "RequestLog Service" to use a named OSGi service registered with the \
 service interface "org.apache.sling.RequestLog" and a service property \
 "requestlog.name" equal to the Logger Name setting.
