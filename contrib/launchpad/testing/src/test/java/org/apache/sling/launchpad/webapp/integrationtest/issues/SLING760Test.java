/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.sling.launchpad.webapp.integrationtest.issues;

import javax.servlet.http.HttpServletResponse;

import org.apache.sling.commons.testing.integration.HttpTestBase;

public class SLING760Test extends HttpTestBase {
    public static final String TEST_PATH = "/" + SLING760Test.class.getSimpleName();

    /** Verify that all instances of our error message are escaped in response, which
     *  is generated by the default Sling error handler */
    public void testEscapedErrorMessages() throws Exception {
        final String [] mustContain = { "&lt;characters/&gt;", "filtered &amp; escaped" };
        final String [] mustNotContain = { "<characters/>", "filtered & escaped" };

        final TestNode tn = new TestNode(HTTP_BASE_URL + TEST_PATH, null);

        String toDelete = null;
        try {
            toDelete = uploadTestScript(tn.scriptPath, "issues/sling760/throw-with-markup.esp", "html.esp");
            final String content = getContent(tn.nodeUrl + ".html", CONTENT_TYPE_HTML,
                    null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR);

            for(String str : mustContain) {
                assertTrue("Content must contain " + str + " (" + content + ")", content.contains(str));
            }

            for(String str : mustNotContain) {
                assertFalse("Content must NOT contain " + str + " (" + content + ")", content.contains(str));
            }
        } finally {
            if (toDelete != null) {
                testClient.delete(toDelete);
            }
            tn.delete();
        }
    }
}
