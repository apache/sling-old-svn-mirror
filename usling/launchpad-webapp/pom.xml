<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache.sling</groupId>
    <artifactId>sling</artifactId>
    <version>1-incubator-SNAPSHOT</version>
    <relativePath>../../parent/pom.xml</relativePath>
  </parent>

  <artifactId>org.apache.sling.launchpad.webapp</artifactId>
  <packaging>war</packaging>
  <version>2.0.0-incubator-SNAPSHOT</version>

  <name>Sling Launchpad Web Application</name>
  <description>
    The launchpad webapp packages the standard launchpad components in a Sling web application. See SLING-149.
  </description>

  <scm>
    <connection>scm:svn:http://svn.apache.org/repos/asf/incubator/sling/trunk/launchpad/launchpad-webapp</connection>
    <developerConnection>
      scm:svn:https://svn.apache.org/repos/asf/incubator/sling/trunk/launchpad/launchpad-webapp
    </developerConnection>
    <url>http://svn.apache.org/viewvc/incubator/sling/trunk/launchpad/launchpad-webapp</url>
  </scm>

  <properties>
    <!--
      Jetty default port (override with -D)
    -->
    <http.port>8080</http.port>

    <!--
      Disable Jetty webapp rescan (override with -D) 
    -->
    <jetty.scan.interval.seconds>0</jetty.scan.interval.seconds>
    
    <!-- 
      Defines which tests are for the "integration-testing" phase
     -->
    <integration.test.code.path>**/usling/webapp/integrationtest</integration.test.code.path>
    
    <!-- 
      Set this to true to stop mvn once the integration test Jetty instance is
      started. Useful to manually test the integration testing webapp.
     -->
     <integration.test.wait>false</integration.test.wait>
  </properties>

  <build>
    <plugins>

      <plugin>
        <!-- 
          The clean plugin deletes the sling work directory as well,
          to avoid confusion with leftovers from previous runs
        -->
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>sling</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.1.5</version>
        <configuration>
          <contextPath>/</contextPath>
          <scanIntervalSeconds>${jetty.scan.interval.seconds}</scanIntervalSeconds>

          <connectors>
            <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
              <port>8080</port>
              <maxIdleTime>60000</maxIdleTime>
              <port>${http.port}</port>
            </connector>
          </connectors>

          <!-- 
            Use target/... as the webapp source, as we unpack stuff there from the
            Sling launcher modules
          -->
          <webAppSourceDirectory>target/${artifactId}-${pom.version}</webAppSourceDirectory>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <!-- Unpack the sling-webapp launcher for inclusion in the web app -->
            <id>unpack-dependencies</id>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <includeArtifactIds>org.apache.sling.launcher.webapp,servlet</includeArtifactIds>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${project.build.directory}/launcher-webapp</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
          <execution>
            <!-- Copy bundles that must be initially installed to WEB-INF/resources/bundles -->
            <id>copy-dependencies</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.build.finalName}/WEB-INF/resources/bundles
              </outputDirectory>
              <excludeTransitive>true</excludeTransitive>
              <includeGroupIds>org.apache.felix,org.apache.sling</includeGroupIds>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Include sling-webapp launcher classes and resources -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <webResources>
            <!-- the classes (except unneeded Main) -->
            <resource>
              <directory>${basedir}/target/launcher-webapp</directory>
              <targetPath>WEB-INF/classes</targetPath>
              <excludes>
                <exclude>org/apache/sling/launcher/app/main/**</exclude>
                <exclude>resources/bundles/org.apache.felix.http.jetty*.jar</exclude>
                <exclude>resources/bundles/org.apache.felix.commons.servlet-api*.jar</exclude>
              </excludes>
              <includes>
                <include>org/**</include>
              </includes>
            </resource>
            <!-- the configuration resources -->
            <resource>
              <directory>${basedir}/target/launcher-webapp</directory>
              <targetPath>WEB-INF</targetPath>
              <includes>
                <include>resources/**</include>
                <include>sling.properties</include>
                <include>sling_install.properties</include>
                <include>jre-*.properties</include>
              </includes>
              <excludes>
                <exclude>resources/bundles/org.apache.felix.http.jetty*.jar</exclude>
                <exclude>resources/bundles/org.apache.felix.commons.servlet-api*.jar</exclude>
              </excludes>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <systemProperties>
            <!-- 
              WARNING: make sure these URLs are consistent with the
              cargo-maven2-plugin settings: AFAIK Maven does not
              expand variables in the <value> element.
              And WARNING: these properties are duplicated somewhere in this
              POM with slightly different values...there must be a better way. 
            -->
            <property>
              <name>launchpad.http.server.url</name>
              <value>http://localhost:8080</value>
            </property>
            <property>
              <name>launchpad.webdav.server.url</name>
              <value>http://localhost:8080/dav/default</value>
            </property>
          </systemProperties>
        </configuration>
      </plugin>
      
    </plugins>
  </build>

  <profiles>
    <profile>
      <!--
        Run the cargo-based integration tests.
        This profile is active by default, to deactivate it activate another
        one, for example " mvn -P nullProfile".
        
        TODO there must be a way to control this with "mvn.test.skip", but I haven't
        found it. 
      -->
      <id>cargoIntegrationTesting</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <executions>
              <execution>
                <id>surefire-integration-test</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <excludes>
                    <exclude>none</exclude>
                  </excludes>
                  <includes>
                    <include>${integration.test.code.path}/**/*Test.java</include>
                  </includes>
                  <systemProperties>
                    <!-- 
                      WARNING: make sure these URLs are consistent with the
                      cargo-maven2-plugin settings: AFAIK Maven does not
                      expand variables in the <value> element.
                      And WARNING: these properties are duplicated somewhere in this
                      POM with slightly different values...there must be a better way. 
                    -->
                    <property>
                      <name>launchpad.http.server.url</name>
                      <value>http://localhost:8080/${project.build.finalName}</value>
                    </property>
                    <property>
                      <name>launchpad.webdav.server.url</name>
                      <value>http://localhost:8080/${project.build.finalName}/dav/default</value>
                    </property>
                  </systemProperties>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>0.3.1</version>
            <executions>
              <execution>
                <id>start-container</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-container</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <wait>${integration.test.wait}</wait>
              <container>
                <containerId>jetty6x</containerId>
                <type>embedded</type>
              </container>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!--
        By default, do not run the integration tests in the test phase, as they have
        no microsling to talk to.
        To debug the integration tests faster than with the normal build cycle,
        deactivate this profile (using -P nullProfile for example) and run a
        separate instance of microsling that the tests can talk to.
      -->
      <id>disableIntegrationTestsInTestPhase</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>${integration.test.code.path}/**/*.java</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- 
        Useful to deactivate other profiles from the command-line
        Is there a better way? mvn doesn't have a "deactivate profile" option. 
      -->
      <id>nullUslingProfile</id>
    </profile>
  </profiles>

  <dependencies>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.osgi.core</artifactId>
      <version>1.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.osgi.compendium</artifactId>
      <version>0.9.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.framework</artifactId>
      <version>1.1.0-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.launcher.webapp</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
      <type>war</type>
    </dependency>
    <dependency>
      <groupId>org.eclipse.equinox.http</groupId>
      <artifactId>servlet</artifactId>
      <version>1.0.0-v20070606</version>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.3</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>commons-httpclient</groupId>
      <artifactId>commons-httpclient</artifactId>
      <version>3.1</version>
      <scope>test</scope>
      <exclusions>
        <!-- 
          Same problem as JCR-683: commons-httpclient depends on commons-logging. Since 
          this webapp uses log4j (see the slf4j-log4j12 dependency below), we need to
          override this dependency with jcl104-over-sflf4j, found below
        -->
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>    
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.3.0</version>
      <scope>test</scope>
     </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl104-over-slf4j</artifactId>
      <version>1.3.0</version>
      <scope>test</scope>
    </dependency>
    

    <!-- The servlet container will have to provide these API classes -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.launchpad.servlets</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.api</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.core</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.commons.mime</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.jcr.api</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.jcr.resource</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.jcr.classloader</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.servlet.resolver</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.scripting.api</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.scripting.resolver</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.scripting.javascript</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.jcr.jackrabbit.server</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.jcr.webdav</artifactId>
      <version>2.0.0-incubator-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.xml-apis</artifactId>
      <version>1.3.4-0002-SNAPSHOT</version>
    </dependency>
    
    <!--
      Commons Dependencies provided by the Apache Felix project
    -->
    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.commons-io</artifactId>
      <version>1.3.2-0002-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.commons-fileupload</artifactId>
      <version>1.1.1-0001-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.commons-collections</artifactId>
      <version>3.2.0-0001-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.commons-beanutils</artifactId>
      <version>1.7.0-0001-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.commons-codec</artifactId>
      <version>1.3.0-0001-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.jsp-api</artifactId>
      <version>2.0.0-0001-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.commons-el</artifactId>
      <version>1.0.0-0001-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.cglib-full</artifactId>
      <version>2.0.2-0001-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>org.apache.felix.commons</groupId>
      <artifactId>org.apache.felix.commons.commons-httpclient</artifactId>
      <version>3.0.1-0001-SNAPSHOT</version>
    </dependency>
    
  </dependencies>
</project>
